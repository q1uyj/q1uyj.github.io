<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>七月笔记</title>
      <link href="/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E4%B8%83%E6%9C%88%E7%AC%94%E8%AE%B0/"/>
      <url>/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E4%B8%83%E6%9C%88%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="Mixins"><a href="#Mixins" class="headerlink" title="Mixins"></a>Mixins</h2><p>Mixins 是一种在不同的 class 层级结构复用 class 代码的方式。例如，当你有一个带有 <code>clockIn</code> 方法的 <code>Employee</code> 类时，它里面的代码可能对 <code>Bartender</code> 和 <code>Nurse</code> 类也有用。但是如果现在你要引入一个新的 <code>Doctor</code> 类，你可能希望复用 <code>Nurse</code> 的一些功能，比如 <code>takeTemperature</code>，但是你不会希望这些功能出现在 <code>Employee</code> 类中，这时候最好的选择是引入一个 <code>Medical</code> mixin。</p><ul><li>test</li><li>sfsd</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Employee</span> </span>&#123;<br>  <span class="hljs-keyword">void</span> clockIn() &#123;...&#125;<br>&#125;<br><br><span class="hljs-keyword">mixin</span> Medical &#123;<br>  <span class="hljs-built_in">int</span> takeTemperature &#123;...&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Nurse</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Employee</span> <span class="hljs-title">with</span> <span class="hljs-title">Medical</span> </span>&#123;&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Doctor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Employee</span> <span class="hljs-title">with</span> <span class="hljs-title">Medical</span> </span>&#123;<br>  <span class="hljs-keyword">void</span> performSurgery() &#123;...&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bartender</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Employee</span> </span>&#123;&#125;<br></code></pre></td></tr></table></figure><h2 id="extension"><a href="#extension" class="headerlink" title="extension"></a>extension</h2><p>当你希望给某个类添加一些方法或功能时使用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&#x27;42&#x27;.parseInt() // invalid<br>int.parse(&#x27;42&#x27;) // valid<br><br>// how to make #1 valid<br>extension NumberParsing on String &#123;<br>  int parseInt() &#123;<br>    return int.parse(this);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="test"><a href="#test" class="headerlink" title="test"></a>test</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  cout &lt;&lt; <span class="hljs-string">&quot;hello, world&quot;</span> &lt;&lt; endl;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="登录功能"><a href="#登录功能" class="headerlink" title="登录功能"></a>登录功能</h2><h2 id="fedux"><a href="#fedux" class="headerlink" title="fedux"></a>fedux</h2><h3 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h3><ul><li>context，全局状态</li><li>action，操作，供组件内部调用</li><li>helper，工具类函数，辅助使用</li><li>model，一些自定义的类型</li><li>reducer，通过 context+params 生成一个新的 context 的纯函数</li><li>selector，一些简单的函数，选择 context 内的数据</li><li>withFeduxContext，这是个 react hoc，包裹一个 react 组件，用于填充组件参数，相当于 redux 里的 connect</li></ul><p>注意事项：</p><ul><li>所有的 action 都以小写字母 a 开头，如 <code>aLoadUser</code></li><li>所有的 reducer 都以小写字母 r 开头，如<code>rUpdateUser</code></li><li>所有的 selector 都以单词 select 开头，如 <code>selectUser</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs react">// @/fedux/context.ts<br><br>import &#123; User &#125; from &#x27;@/fedux/models&#x27;;<br><br>// 定义应用要用的全局 context<br>export interface FeduxContext &#123;<br>    // ... context 别的字段<br>    users: Record&lt;string, User&gt;;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/ui-equals-function-of-state.png" alt="A mathematical formula of UI = f(state). &#39;UI&#39; is the layout on the screen. &#39;f&#39; is your build methods. &#39;state&#39; is the application state."></p><h2 id="置顶消息的链路"><a href="#置顶消息的链路" class="headerlink" title="置顶消息的链路"></a>置顶消息的链路</h2><p><code>chat_item</code> 中 <code>_onChatGroupPopMenuSelect</code> 调用 <code>getFeduxActions().aUpdateChatUser(...)</code>，然后通过 <code>aUpdateChatUserParams</code> 函数发起 api 调用 <code>callApi().chatUserUpdate(ChatUserUpdateReq)</code> 从而将消息置顶。</p><h2 id="git-相关"><a href="#git-相关" class="headerlink" title="git 相关"></a>git 相关</h2><h3 id="情景-1"><a href="#情景-1" class="headerlink" title="情景 1"></a>情景 1</h3><ol><li>在 <code>dev/qyj</code> 分支上做了一些修改并 push 到 <code>origin/dev/qyj</code> 等待合并；</li></ol><p><img src="/assets/image-20230713103511017.png" alt="image-20230713103511017"></p><p>可以看到当前提交是 <code>60fc3542</code>;</p><ol start="2"><li>code review 中 xalanq 修改了代码并提交到远端仓库，此时 <code>origin/master</code> 和 <code>origin/dev/qyj</code> 的 commit_id 不同于第一步中的：</li></ol><p><img src="/assets/image-20230713104150728.png" alt="image-20230713104150728"></p><p><img src="/assets/image-20230713104213444.png" alt="image-20230713104213444"></p><p>可以看到最新提交 hash 是 <code>d6cf61ed</code>;</p><ol start="3"><li>此时如何让本地的 <code>master</code> 和 <code>dev/qyj</code> 与远端同步？</li></ol><ul><li><p><code>git reset --hard HEAD^</code></p><p>将本地 <code>dev/qyj</code> 的 commit{ <code>60fc3542</code>} 撤销，防止后续拉取远端代码时冲突；(tips: git reset 只影响当前分支)</p></li><li><p><code>git pull</code></p><p>等待远端更新完毕之后，拉取最新分支从而同步</p></li></ul><h3 id="情景-2"><a href="#情景-2" class="headerlink" title="情景 2"></a>情景 2</h3><h2 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h2><p>Hexo 安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">npm install hexo -g<br></code></pre></td></tr></table></figure><p>初始化博客</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">hexo init [文件夹名字]<br></code></pre></td></tr></table></figure><p>安装依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">npm install<br></code></pre></td></tr></table></figure><p>预览</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">hexo serve<br></code></pre></td></tr></table></figure><p>安装 hexo-deployer-git</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>先 clean 再生成 再预览 再上传</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">hexo clean<br>hexo generate<br>hexo deploy<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">npm i hexo-theme-butterfly<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">npm install hexo-renderer-pug hexo-renderer-stylus --save<br></code></pre></td></tr></table></figure><p>修改 Hexo 根目录下的_config.yml，把主题改为 butterfly</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">theme:</span> <span class="hljs-string">butterfly</span><br></code></pre></td></tr></table></figure><p>简略方法：</p><blockquote><p>安装 butterfly cli</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">npm install hexo-butterfly-cli -g<br></code></pre></td></tr></table></figure><p>使用 butterfly cli 初始化博客</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">butterfly-cli init [文件夹名字]<br></code></pre></td></tr></table></figure></blockquote>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/hello-world/"/>
      <url>/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
